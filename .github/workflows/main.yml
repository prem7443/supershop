name: Deploy or Destroy ECS with Terraform

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - destroy

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 354912177173.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: repo1
  IMAGE_TAG: ${{ github.run_number }}
  IMAGE_URI: 354912177173.dkr.ecr.us-east-1.amazonaws.com/repo1:${{ github.run_number }}

jobs:
  deploy_or_destroy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        if: ${{ github.event.inputs.action == 'deploy' }}
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Build Docker image
        if: ${{ github.event.inputs.action == 'deploy' }}
        run: |
          docker build -t $IMAGE_URI .

      - name: Push Docker image to ECR
        if: ${{ github.event.inputs.action == 'deploy' }}
        run: |
          docker push $IMAGE_URI

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: ./terraform/ECS
        run: terraform init

      - name: Terraform Apply (Deploy)
        if: ${{ github.event.inputs.action == 'deploy' }}
        working-directory: ./terraform/ECS
        run: |
          terraform apply -auto-approve \
            -var="image=${{ env.IMAGE_URI }}"

      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        working-directory: ./terraform/ECS
        run: |
          terraform destroy -auto-approve \
            -var="image=${{ env.IMAGE_URI }}"
