name: Manual Deploy to ECS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (e.g. staging, production)'
        required: true
        default: 'staging'
      image_tag:
        description: 'Docker image tag'
        required: false
        default: 'latest'

env:
  AWS_REGION: us-east-1
  ECR_REPO: repo1
  ECS_CLUSTER: cl
  ECS_SERVICE: my-ecs-service
  CONTAINER_NAME: my-container

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Show selected environment
        run: echo "Deploying to environment: ${{ github.event.inputs.environment }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          IMAGE_TAG="${{ github.event.inputs.image_tag }}"
          docker build -t $ECR_REPO:$IMAGE_TAG .

      - name: Tag Docker image for ECR
        run: |
          IMAGE_TAG="${{ github.event.inputs.image_tag }}"
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          IMAGE_URI="$ACCOUNT_ID.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${IMAGE_TAG}"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          docker tag $ECR_REPO:$IMAGE_TAG $IMAGE_URI

      - name: Push image to ECR
        run: |
          docker push $IMAGE_URI

      - name: Update ECS service
        run: |
          echo "Updating ECS service with image $IMAGE_URI"
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment
